/* 
 * Aces Encoded Listener API
 *
 * API Specification for Encoded Listeners that read data on a blockchain and forward transaction events to registered subscribers. 
 *
 * OpenAPI spec version: 0.1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using IO.Swagger.Client;
using IO.Swagger.Api;
using IO.Swagger.Model;

namespace IO.Swagger.Test
{
    /// <summary>
    ///  Class for testing DefaultApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class DefaultApiTests
    {
        private DefaultApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new DefaultApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of DefaultApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' DefaultApi
            //Assert.IsInstanceOfType(typeof(DefaultApi), instance, "instance is a DefaultApi");
        }

        
        /// <summary>
        /// Test StatusGet
        /// </summary>
        [Test]
        public void StatusGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.StatusGet();
            //Assert.IsInstanceOf<Health> (response, "response is Health");
        }
        
        /// <summary>
        /// Test SubscriptionsIdEventsGet
        /// </summary>
        [Test]
        public void SubscriptionsIdEventsGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //int? pageSize = null;
            //int? page = null;
            //string continuation = null;
            //var response = instance.SubscriptionsIdEventsGet(id, pageSize, page, continuation);
            //Assert.IsInstanceOf<InlineResponse200> (response, "response is InlineResponse200");
        }
        
        /// <summary>
        /// Test SubscriptionsIdGet
        /// </summary>
        [Test]
        public void SubscriptionsIdGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //var response = instance.SubscriptionsIdGet(id);
            //Assert.IsInstanceOf<Subscription> (response, "response is Subscription");
        }
        
        /// <summary>
        /// Test SubscriptionsIdUnsubscribesPost
        /// </summary>
        [Test]
        public void SubscriptionsIdUnsubscribesPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //var response = instance.SubscriptionsIdUnsubscribesPost(id);
            //Assert.IsInstanceOf<SubscriptionUnsubscribe> (response, "response is SubscriptionUnsubscribe");
        }
        
        /// <summary>
        /// Test SubscriptionsPost
        /// </summary>
        [Test]
        public void SubscriptionsPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //SubscriptionRequest subscriptionRequest = null;
            //var response = instance.SubscriptionsPost(subscriptionRequest);
            //Assert.IsInstanceOf<Subscription> (response, "response is Subscription");
        }
        
    }

}
